import 'dotenv/config';
import {randomBytes} from 'crypto';
import fastify, {FastifyRequest} from 'fastify';
import fsRoutes from './lib/fsRoutes';
import jwt from '@fastify/jwt';

const {NODE_ENV} = process.env;
const HOST = process.env.HOST || '0.0.0.0';
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3000;
let {JWT_SECRET} = process.env;

const server = fastify({
  ignoreTrailingSlash: true,
  logger: {
    level: NODE_ENV === 'development' ? 'trace' : 'debug',
    transport: {
      target: '@fastify/one-line-logger',
    },
  },
});

if (!JWT_SECRET) {
  const message = 'JWT_SECRET environment variable is not set';

  if (NODE_ENV === 'development') {
    JWT_SECRET = randomBytes(32).toString('base64');
    server.log.warn(`${message}, using autogenerated key: ${JWT_SECRET}`);
  } else throw new Error(message);
}

void server.register(jwt, {secret: JWT_SECRET});

server.decorate('authenticate', async (request: FastifyRequest) => {
  await request.jwtVerify();
});

void server.register(fsRoutes);

server.post<{
  Body: {
    username: string;
    password: string;
  };
}>(
  '/signup',
  {
    schema: {
      body: {
        type: 'object',
        properties: {
          username: {type: 'string'},
          password: {type: 'string'},
        },
        required: ['username', 'password'],
      },
    },
  },
  (request, reply) => {
    const access_token = server.jwt.sign(request.body, {expiresIn: '10m'});
    void reply.send({access_token});
  },
);

server.get('/verify', {onRequest: [server.authenticate]}, (request, reply) => {
  void reply.send({user: request.user, verified: true});
});

server.get('/user', (request, reply) => {
  void reply.send({user: request.user});
});

void server.listen({host: HOST, port: PORT});
